"use strict";

const
    { exec, spawn } = require('child_process'),
    { ChildProcess } = require('child_process');

let redisServerProcess = null,
    port = 6379;

/**
 * Start Redis server with allowed connections
 * @param {object=} args
 * @param {boolean=} enablePersistence To enable saving on disk
 * @return {Promise.<boolean>}
 */
function startRedis(args, enablePersistence) {
    let params = [];
    args = args || {};
    for (let name in args) {
        if (name == 'port') port = args[name];
        params.push("--" + name);
        params.push(args[name]);
    }
    // Disable persistence
    if (!enablePersistence) {
        params.push('--save');
        params.push('');
    }
    return new Promise((resolve, reject) => {
        if (redisServerProcess) reject(new Error('Redis server already started.'));
        else {
            /** @type ChildProcess redisServerProcess */
            redisServerProcess = spawn('redis-server', params);
            // noinspection JSUnresolvedFunction
            redisServerProcess.stdout.setEncoding();
            redisServerProcess.stdout.on('data', function stdout(data) {
                // console.log('data:', data);
                if (data.indexOf('eady to accept connections') > -1) {
                    redisServerProcess.stdout.removeListener('data', stdout);
                    resolve();
                } else if (data.indexOf('Address already in use') > -1) {
                    stopRedis().then(function() {
                        reject(new Error('Address already in use!'));
                    })
                }
            });
            redisServerProcess.on('close', (code) => {
                if (code && redisServerProcess) {
                    stopRedis().then(function() {
                        reject(new Error('Redis server error: ' + code));
                    });
                }
            })
        }
    });
}


/**
 * Stop redis server
 */
function stopRedis() {
    return new Promise((resolve, reject) => {
        if (redisServerProcess instanceof ChildProcess) {
            // noinspection JSCheckFunctionSignatures
            redisServerProcess.kill();
            redisServerProcess.once('close', () => {
                if (redisServerProcess) {
                    redisServerProcess = null;
                    resolve();
                }
            });
        } else {
            reject(new Error('Redis server is not running.'));
        }
    });
}

// Stop redis process on exit
const cleanExit = async function() { redisServerProcess && await stopRedis(); };
process.on('exit', cleanExit);


exports.startRedis = startRedis;
exports.stopRedis = stopRedis;